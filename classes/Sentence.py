from typing import List, Dict
from Word import Word
from syn import Syn


class Sentence:
    """
    Class object representing a sentence
    """

    def __init__(self, sentence: str, anaphors: Dict[str, str]):
        self.nodes = Syn.get_sentence_nodes(sentence)
        self.anaphors = anaphors
        self.words = self._create_words_objects()
        self.root = self._find_root()
        # self.resolved_subject = ?

    def _create_words_objects(self) -> List[Word]:
        """
        Method creates a list of Word objects from nodes generated by SET.
        """
        words = []
        for node in self.nodes:
            _, word_form, _, _, member = node
            word = Word(word_form, member, [], self.anaphors[word_form], False)  # TODO direct speech, anaphors
            words.append(word)
        self._add_dependencies(words)
        return words

    def _add_dependencies(self, words: List[Word]) -> None:
        """
        Takes the undone list of Word objects and updates it by adding dependending Word objects to dependencies.
        """
        for i, node in enumerate(self.nodes):
            dep_idx = node[2]
            words[dep_idx].dependencies.append(words[i])

    def _find_root(self) -> Word:
        """
        Method takes the Word objects list and finds the root of sentence tree.
        """
        for word in self.words:
            if not word.dependencies:
                return word
